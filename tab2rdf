#!/usr/bin/gawk -f

# tab2rdf : a simple template-based converter for data in relational tables
# (c) 2012 Cam Webb <cwebb@oeb.harvard.edu>
# Released under BSD 2-clause license

BEGIN{

# public variables tables[], DIR, d[], fieldnames[], namefields[]

  testArgs() ;
  readConfig() ;
  testData() ;
  print d["_general","_prefix"] "\n";
  constructTurtle() ;
  exit;
}

function constructTurtle(        dat, table, i, j, k, s)
{
  RS = "\n"; FS = "|";
  for (table in tables)
    {
	  getline < ( DIR "/" table ".csv") ; 	  # skip header row
	  while (( getline < ( DIR "/" table ".csv") ) > 0 )
		{
		  # only for non-blank pk rows
		  if ($namefields[table, d[table,"_pk"]] != "")
			{
              for (i = 1; i <= NF; i++) 
                {
                  if ($i != "") 
                    {
                      dat[ fieldnames[table,i] ] = $i;
                      # dat2 needed since gawk chokes on for (j in x) inside
                      #      for (i in x). Not sure why
                      dat2[ fieldnames[table,i] ] = $i;
                    }
                }
            }
          
          # Make a local subject, if not a URI
          if (substr(dat[d[table, "_pk"]],1,7) != "http://")
            {
              s = d[table, "_GUID"];
              regex = "{" d[table, "_pk"] "}" ; 
              gsub(regex, dat[d[table, "_pk"]], s);
              gsub(/\{~\}/, d["_general","_unique"], s);
            }
          else s = "<" dat[d[table, "_pk"]] ">" ;

          # print class (optional)
          print s " a " d[table,"_class"] " .";

          # Make the other statements
          for (j in dat) 
            {
              triple = d[table, j] ;
              if (triple) 
                { 
                  # check if the _fk is a URI
                  if ((d[table, ("_fk:" j)]) && \
                      (substr(dat2[j],1,7) == "http://"))
                    {
                      # need to find the triple parts that refer to 
                      # this _fk. These will be where {_fk} occurs alone
                      # without another {xxx}
                      newtriple = "";
                      natom = split(triple,atoms,/\ \ */);
                      for (natomi = 1; natomi <= natom; natomi++) {
                        # copy the element
                        oriatom = atoms[natomi];
                        # remove the unique code and primary key
                        gsub(/\{[@~]\}/, "" , atoms[natomi]);
                        # remove all chars other than `{`
                        gsub(/[^{]/,"",atoms[natomi]);
                        if (length(atoms[natomi]) == 1) {
                          # make the plain substitution
                          newtriple = newtriple "<" dat2[j] ">";
                        } 
                        else newtriple = newtriple oriatom;
                        if (natomi < natom) newtriple = newtriple " " ;
                      }
                      triple = newtriple;
                    }

                  # substitute the rest
                  for (k in dat2) 
                    {
                      regex = "{" k "}" ; 
                      # clean possible URL parts if _fk
                      if (d[table, ("_fk:" k)]) {
                        gsub(regex, gensub(/[^A-Za-z0-9_\-]/,"","G",dat2[k]), \
                             triple);
                      } else gsub(regex, dat2[k], triple);
                    } 

                  # URI substitutions
                  subs = d["_general", \
                          ("_sub:" d[table,("_fk:" j)] ":" dat2[j])];
                  if (subs)
                    {
                      split(subs, ss, "|");
                      gsub(ss[1] , ss[2], triple);
                    }

                  gsub(/\{@\}/, s, triple);
                  gsub(/\{~\}/, d["_general","_unique"], triple);
                  # fix quotes
                  gsub(/\\x22/,"\"", triple);

                  
                  print triple;
                  delete dat;
                }
            }
          print "";
        }
      close(DIR "/" table ".csv");
    }
}
 
function readConfig(    key, i, line, nlines ) 
{
  RS = "";
  while ((getline < (DIR "/conf.ini")) > 0 )
    {
      # strip the backslashes that allow line overflow and compress spaces
      gsub(/\ *\\\n\ */," ") ;
      nlines = split($0,line,"\n");
      
      # Check for correct header
      if (!match(line[1],/\[[A-Za-z0-9_]+\]/)) {
        print "Error: incorrect section header format in conf.ini file" ; exit 
      }
      table = gensub(/\[([A-Za-z0-9_]+)\]/,"\\1","G", line[1]);
      
      # counter
      if (table != "_general") tables[table] = 1;

      # Read each line
      for (i = 2; i <= nlines; i++)
        {
          # Check format
          # move interior quotes to hex to allow regex matching
          gsub(/\\"/,"\\x22",line[i]);
          if (!match(line[i],/^[\t\ ]*[A-Za-z0-9_:]+\ *=\ *"[^"]+"[\t\ ]*$/)) {
            print "Error: conf.ini file line has incorrect format : " \
              line[i]; exit ;
          } 
          # could use patsplit(), but want to keep this gawk3 compat
          key = gensub(/^[\t\ ]*([A-Za-z0-9_:]+)\ *=\ *"([^"]+)"[\t\ ]*$/, \
                       "\\1","G",line[i]);
          d[table,key] \
            = gensub(/^[\t\ ]*([A-Za-z0-9_:]+)\ *=\ *"([^"]+)"[\t\ ]*$/, \
                       "\\2","G",line[i]);
        }
    }

  close(DIR "/conf.ini") ;
}

function testData(     t, i, j, z, k, l, pk, fk, fields )
{
  # preload all files to check for key dupes and failure of foreign keys
  FS = "|";
  RS = "\n";

  # for each table
  for (t in tables)
	{
	  # read the first line of the table
	  getline < ( DIR "/" t ".csv") ;
	  fields[t] = 0;
	  for (i = 1; i <= NF; i++)
		{
		  # Discard blank columns
		  if ($i != "")
			{
			  fieldnames[t,i] = $i;
			  namefields[t,$i] = i;
			  fields[t]++;
              z[$i]++;
			}
          # test for duplicate column headers
          for (j in z) { 
            if (z[j] > 1) { 
              print "Error: Duplicate column name '" j "' in table '" t \
                "'" ; exit; 
            } } 
          delete z;
		}

	  # read the rest of the rows
	  while (( getline < ( DIR "/" t ".csv") ) > 0 )
		{
		  # only for non-blank pk rows
		  if ($namefields[t, d[t,"_pk"]] != "")
			{
			  for (i = 1; i <= fields[t]; i++)
				{
                  # primary keys
                  if (i == namefields[t,d[t,"_pk"]]) {
                    pk[t,$i]++;
                    pk2[t,gensub(/[^A-Za-z0-9_\-]/,"","G",$i)]++ ;
                  }
                  # foreign keys
				  if (d[t,("_fk:" fieldnames[t,i])] != "") {
                    fk[t,i,$i]++ ;
                  }
				}
			}
		}
	  close(DIR "/" t ".csv");
	}
  
  # now run tests

  # test for disallowed chars in pk, unless URI
  for (i in pk)
    {
      split(i,k,SUBSEP); # k[1] is the table, k[2] the value
      if ((k[2] != gensub(/[^A-Za-z0-9_\-]/,"","G", k[2])) \
          && (substr(k[2],1,7) != "http://")) {
        print "Error: dissallowed characters in primary key '" k[2] \
          "' in table '" k[1] "'"; exit ;
      }
    }

  # test for dupes in primary key, use 'slimmed' pk
  for (i in pk2)
    {
      split(i,k,SUBSEP); # k[1] is the table, k[2] the value
      if (pk2[k[1],k[2]] > 1) { 
        print "Error: duplicate primary key '" k[2] "' in table '" k[1] \
          "'"; exit ;
      }
    }

  #test for foreign key lookups
  for (i in fk)
    {
      split(i,l,SUBSEP); 
      # l[1] is the table; l[2] is the field number, l[3] the value
      ftab = d[l[1], ("_fk:" fieldnames[l[1],l[2]])];
      if ((!pk[ftab, l[3]]) &&                  \
          (!d["_general", ("_sub:" ftab ":" l[3])])) 
        {
          print "Error: foreign key '" l[3] "' from table '" l[1] \
            "' field '" fieldnames[l[1],l[2]] "'";
          print "  is not in the primary key for table '" ftab "'";
          exit;
        }
    }
}

function testArgs()
{
  # test args
  if (ARGC != 2) 
    { print "Usage: tab2rdf directory_of_csv_files" ; exit }
  # test for directory
  if (system("test -d " ARGV[1]) == 1) 
	{ print "Error: " ARGV[1] " not a directory. Exiting."; exit; }
  else  DIR = ARGV[1] ;
}

